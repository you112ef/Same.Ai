// Same.Ai Database Schema
// Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  USER
  ADMIN
}

enum AIModel {
  GPT4
  GPT35
  CLAUDE3_OPUS
  CLAUDE3_SONNET
  CLAUDE3_HAIKU
  GEMINI_PRO
  GEMINI_ULTRA
  LLAMA2
  LLAMA3
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

enum FileType {
  DOCUMENT
  IMAGE
  AUDIO
  VIDEO
  OTHER
}

// Main Models
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  conversations Conversation[]
  files         File[]
  settings      UserSettings?
  ownedTeams    Team[]         @relation("TeamOwner")
  teamMembers   TeamMember[]

  @@map("users")
}

model UserSettings {
  id           String  @id @default(cuid())
  userId       String  @unique
  defaultModel AIModel @default(GPT4)
  theme        Theme   @default(SYSTEM)
  language     String  @default("ar")
  preferences  Json    @default("{}")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Conversation {
  id        String   @id @default(cuid())
  title     String
  userId    String
  model     AIModel  @default(GPT4)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]
  files    ConversationFile[]

  @@map("conversations")
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  content        String      @db.Text
  role           MessageRole
  model          AIModel?
  tokens         Int?
  metadata       Json        @default("{}")
  createdAt      DateTime    @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model File {
  id        String   @id @default(cuid())
  name      String
  type      FileType
  mimeType  String
  size      Int
  url       String
  userId    String
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())

  // Relations
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations ConversationFile[]

  @@map("files")
}

model ConversationFile {
  id             String   @id @default(cuid())
  conversationId String
  fileId         String
  createdAt      DateTime @default(now())

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  file         File         @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([conversationId, fileId])
  @@map("conversation_files")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner   User         @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members TeamMember[]

  @@map("teams")
}

model TeamMember {
  id       String   @id @default(cuid())
  teamId   String
  userId   String
  role     TeamRole @default(MEMBER)
  joinedAt DateTime @default(now())

  // Relations
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@map("team_members")
}

// Analytics and Logs (للمستقبل)
model APIUsage {
  id        String   @id @default(cuid())
  userId    String
  model     AIModel
  tokens    Int
  cost      Float?
  endpoint  String
  createdAt DateTime @default(now())

  @@map("api_usage")
}

model SystemLog {
  id        String   @id @default(cuid())
  level     String // INFO, WARN, ERROR
  message   String   @db.Text
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())

  @@map("system_logs")
}

// Indexes for better performance
// These will be added as needed based on query patterns