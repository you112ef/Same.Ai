const fs = require('fs-extra');
const path = require('path');
const { exec } = require('child_process');
const { promisify } = require('util');
const execAsync = promisify(exec);

class FileManager {
  constructor(sessionId) {
    this.sessionId = sessionId;
    this.projectDir = path.join(process.cwd(), 'projects', sessionId);
    this.baseDir = path.join(this.projectDir, 'src');
  }

  /**
   * Ensure project directory exists
   */
  async ensureProjectDirectory() {
    try {
      await fs.ensureDir(this.projectDir);
      await fs.ensureDir(this.baseDir);
      console.log(`Project directory created: ${this.projectDir}`);
      return true;
    } catch (error) {
      console.error('Error creating project directory:', error);
      throw error;
    }
  }

  /**
   * Create a new project with specified type
   */
  async createProject(projectType = 'nextjs') {
    try {
      const projectConfig = this.getProjectConfig(projectType);
      
      // Create project structure
      for (const [filePath, content] of Object.entries(projectConfig.files)) {
        const fullPath = path.join(this.baseDir, filePath);
        await fs.ensureDir(path.dirname(fullPath));
        await fs.writeFile(fullPath, content, 'utf8');
      }

      // Create package.json
      const packageJsonPath = path.join(this.projectDir, 'package.json');
      await fs.writeFile(packageJsonPath, JSON.stringify(projectConfig.packageJson, null, 2));

      // Install dependencies
      await this.installDependencies();

      console.log(`Project created successfully: ${projectType}`);
      return { success: true, projectType, projectDir: this.projectDir };
    } catch (error) {
      console.error('Error creating project:', error);
      throw error;
    }
  }

  /**
   * Get project configuration for different project types
   */
  getProjectConfig(projectType) {
    const configs = {
      nextjs: {
        packageJson: {
          name: `ai-project-${this.sessionId}`,
          version: '1.0.0',
          private: true,
          scripts: {
            dev: 'next dev',
            build: 'next build',
            start: 'next start',
            lint: 'next lint'
          },
          dependencies: {
            next: '^13.0.0',
            react: '^18.0.0',
            'react-dom': '^18.0.0',
            typescript: '^4.9.0',
            '@types/node': '^18.0.0',
            '@types/react': '^18.0.0',
            '@types/react-dom': '^18.0.0'
          }
        },
        files: {
          'pages/_app.tsx': `import type { AppProps } from 'next/app'
import '../styles/globals.css'

export default function App({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />
}`,
          'pages/index.tsx': `import { useState } from 'react'
import Head from 'next/head'

export default function Home() {
  const [count, setCount] = useState(0)

  return (
    <div className="min-h-screen bg-gray-100">
      <Head>
        <title>AI Generated Project</title>
        <meta name="description" content="Generated by AI Coding Assistant" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto px-4 py-8">
        <h1 className="text-4xl font-bold text-center mb-8">
          Welcome to Your AI Generated Project!
        </h1>
        
        <div className="text-center">
          <p className="text-xl mb-4">Counter: {count}</p>
          <button
            onClick={() => setCount(count + 1)}
            className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
          >
            Increment
          </button>
        </div>
      </main>
    </div>
  )
}`,
          'styles/globals.css': `@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}`,
          'next.config.js': `/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
}

module.exports = nextConfig`,
          'tailwind.config.js': `/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx}',
    './components/**/*.{js,ts,jsx,tsx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}`,
          'tsconfig.json': `{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}`
        }
      },
      react: {
        packageJson: {
          name: `ai-project-${this.sessionId}`,
          version: '1.0.0',
          private: true,
          scripts: {
            start: 'react-scripts start',
            build: 'react-scripts build',
            test: 'react-scripts test',
            eject: 'react-scripts eject'
          },
          dependencies: {
            react: '^18.0.0',
            'react-dom': '^18.0.0',
            'react-scripts': '5.0.1',
            typescript: '^4.9.0',
            '@types/node': '^18.0.0',
            '@types/react': '^18.0.0',
            '@types/react-dom': '^18.0.0'
          },
          browserslist: {
            production: ['>0.2%', 'not dead', 'not op_mini all'],
            development: ['last 1 chrome version', 'last 1 firefox version', 'last 1 safari version']
          }
        },
        files: {
          'public/index.html': `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="AI Generated React App" />
    <title>AI Generated App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>`,
          'src/index.tsx': `import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);`,
          'src/App.tsx': `import React, { useState } from 'react';
import './App.css';

function App() {
  const [count, setCount] = useState(0);

  return (
    <div className="App">
      <header className="App-header">
        <h1>Welcome to Your AI Generated App!</h1>
        <p>Counter: {count}</p>
        <button onClick={() => setCount(count + 1)}>
          Increment
        </button>
      </header>
    </div>
  );
}

export default App;`,
          'src/index.css': `body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.App {
  text-align: center;
}

.App-header {
  background-color: #282c34;
  padding: 20px;
  color: white;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

button {
  font-size: 18px;
  padding: 10px 20px;
  margin: 10px;
  cursor: pointer;
  background-color: #61dafb;
  border: none;
  border-radius: 5px;
  color: #282c34;
}

button:hover {
  background-color: #4fa8c7;
}`,
          'tsconfig.json': `{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "es6"],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": ["src"]
}`
        }
      }
    };

    return configs[projectType] || configs.react;
  }

  /**
   * Edit or create a file
   */
  async editFile(filePath, content, options = {}) {
    try {
      const fullPath = path.join(this.baseDir, filePath);
      await fs.ensureDir(path.dirname(fullPath));
      
      if (options.append) {
        await fs.appendFile(fullPath, content, 'utf8');
      } else {
        await fs.writeFile(fullPath, content, 'utf8');
      }

      console.log(`File updated: ${filePath}`);
      return { success: true, filePath, fullPath };
    } catch (error) {
      console.error('Error editing file:', error);
      throw error;
    }
  }

  /**
   * Read file content
   */
  async readFile(filePath) {
    try {
      const fullPath = path.join(this.baseDir, filePath);
      const content = await fs.readFile(fullPath, 'utf8');
      return { success: true, content, filePath };
    } catch (error) {
      console.error('Error reading file:', error);
      throw error;
    }
  }

  /**
   * Delete a file
   */
  async deleteFile(filePath) {
    try {
      const fullPath = path.join(this.baseDir, filePath);
      await fs.remove(fullPath);
      console.log(`File deleted: ${filePath}`);
      return { success: true, filePath };
    } catch (error) {
      console.error('Error deleting file:', error);
      throw error;
    }
  }

  /**
   * List all files in project
   */
  async listFiles(dir = '') {
    try {
      const targetDir = path.join(this.baseDir, dir);
      const files = await fs.readdir(targetDir, { withFileTypes: true });
      
      const fileList = await Promise.all(
        files.map(async (file) => {
          const filePath = path.join(dir, file.name);
          const fullPath = path.join(targetDir, file.name);
          
          if (file.isDirectory()) {
            const subFiles = await this.listFiles(filePath);
            return {
              name: file.name,
              type: 'directory',
              path: filePath,
              children: subFiles
            };
          } else {
            const stats = await fs.stat(fullPath);
            return {
              name: file.name,
              type: 'file',
              path: filePath,
              size: stats.size,
              modified: stats.mtime
            };
          }
        })
      );

      return fileList;
    } catch (error) {
      console.error('Error listing files:', error);
      throw error;
    }
  }

  /**
   * Run a command in the project directory
   */
  async runCommand(command) {
    try {
      const { stdout, stderr } = await execAsync(command, {
        cwd: this.projectDir,
        timeout: 30000 // 30 seconds timeout
      });

      return { success: true, stdout, stderr };
    } catch (error) {
      console.error('Error running command:', error);
      return { success: false, error: error.message, stderr: error.stderr };
    }
  }

  /**
   * Install project dependencies
   */
  async installDependencies() {
    try {
      console.log('Installing dependencies...');
      const result = await this.runCommand('npm install');
      
      if (result.success) {
        console.log('Dependencies installed successfully');
      } else {
        console.error('Failed to install dependencies:', result.error);
      }
      
      return result;
    } catch (error) {
      console.error('Error installing dependencies:', error);
      throw error;
    }
  }

  /**
   * Build the project
   */
  async buildProject() {
    try {
      console.log('Building project...');
      const result = await this.runCommand('npm run build');
      
      if (result.success) {
        console.log('Project built successfully');
      } else {
        console.error('Failed to build project:', result.error);
      }
      
      return result;
    } catch (error) {
      console.error('Error building project:', error);
      throw error;
    }
  }

  /**
   * Start development server
   */
  async startDevServer() {
    try {
      console.log('Starting development server...');
      const result = await this.runCommand('npm run dev');
      return result;
    } catch (error) {
      console.error('Error starting dev server:', error);
      throw error;
    }
  }

  /**
   * Clean up project files
   */
  async cleanupProject() {
    try {
      await fs.remove(this.projectDir);
      console.log(`Project cleaned up: ${this.projectDir}`);
      return { success: true };
    } catch (error) {
      console.error('Error cleaning up project:', error);
      throw error;
    }
  }

  /**
   * Get project statistics
   */
  async getProjectStats() {
    try {
      const files = await this.listFiles();
      const totalFiles = this.countFiles(files);
      const totalSize = await this.calculateSize(files);
      
      return {
        totalFiles,
        totalSize,
        projectDir: this.projectDir,
        sessionId: this.sessionId
      };
    } catch (error) {
      console.error('Error getting project stats:', error);
      throw error;
    }
  }

  /**
   * Count total files recursively
   */
  countFiles(files) {
    let count = 0;
    for (const file of files) {
      if (file.type === 'file') {
        count++;
      } else if (file.children) {
        count += this.countFiles(file.children);
      }
    }
    return count;
  }

  /**
   * Calculate total size recursively
   */
  async calculateSize(files) {
    let totalSize = 0;
    for (const file of files) {
      if (file.type === 'file') {
        totalSize += file.size || 0;
      } else if (file.children) {
        totalSize += await this.calculateSize(file.children);
      }
    }
    return totalSize;
  }
}

module.exports = FileManager;